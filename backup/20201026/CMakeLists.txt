cmake_minimum_required(VERSION 3.16)

project(COCR)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CUDA_STANDARD 14)
set(CMAKE_CUDA_STANDARD_REQUIRED TRUE)
set(CMAKE_CXX_STANDARD_REQUIRED TRUE)

if (MSVC)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /utf-8")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /utf-8")
    set(HEADERS_DIR C:/include)
    set(SHARED_LIBS_DIR C:/shared)
    set(STATIC_LIBS_DIR C:/static)
    set(Eigen3_DIR ${HEADERS_DIR}/eigen3/cmake)
    set(Qt5_DIR C:/Qt/5.15.0/msvc2019_64/lib/cmake/Qt5)
    set(VTK_DIR ${SHARED_LIBS_DIR}/vtk/lib/cmake/vtk-8.2)
    set(OpenCV_DIR ${SHARED_LIBS_DIR}/opencv/x64/vc16/lib)
    set(Boost_DIR ${SHARED_LIBS_DIR}/boost/lib/cmake/Boost-1.74.0)
    set(Torch_DIR ${SHARED_LIBS_DIR}/libtorch/share/cmake/Torch)
    set(RapidJSON_DIR ${HEADERS_DIR}/rapidjson/cmake)
elseif(UNIX)
    set(Torch_DIR /home/xgd/install/libtorch-latest/share/cmake/Torch)
    set(HEADERS_DIR /media/xgd/Windows-SSD/Headers)
    set(Eigen3_DIR ${HEADERS_DIR}/eigen/share/eigen3/cmake)
    set(OpenCV_DIR /home/xgd/install/opencv-cpu/lib/cmake/opencv4)
    set(Qt5_DIR /home/xgd/Qt/5.15.0/gcc_64/lib/cmake/Qt5)
    set(RapidJSON_DIR ${HEADERS_DIR}/rapidjson/cmake)
endif ()

find_package(OpenMP)
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")

#find_package(Eigen3 REQUIRED)
#include_directories(${EIGEN3_INCLUDE_DIR})

find_package(Qt5 COMPONENTS Core Quick Widgets LinguistTools)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

# find_package(VTK REQUIRED)

find_package(OpenCV REQUIRED)

set(Boost_USE_STATIC_LIBS OFF)
set(Boost_USE_STATIC_RUNTIME OFF)
find_package(Boost REQUIRED COMPONENTS coroutine filesystem thread)
include_directories(${Boost_INCLUDE_DIR})

set(PYTORCH_VERSION "1.6.0")
find_package(Torch ${PYTORCH_VERSION})

find_package(RapidJSON REQUIRED)
include_directories(${RAPIDJSON_INCLUDE_DIRS})

if (MSVC)
    set(OpenBabel_DIR ${STATIC_LIBS_DIR}/openbabel-3.1.1)
    include_directories(${OpenBabel_DIR}/include)
    if (CMAKE_BUILD_TYPE)
        if (${CMAKE_BUILD_TYPE} STREQUAL Debug)
            set(OpenBabel_LIBS ${OpenBabel_DIR}/staticlibs/openbabel-3d.lib)
        endif ()
    endif ()
    if (NOT OpenBabel_LIBS)
        set(OpenBabel_LIBS ${OpenBabel_DIR}/staticlibs/openbabel-3.lib)
    endif ()
elseif (UNIX)
    set(OpenBabel_DIR /home/xgd/install/openbabel)
    include_directories(${OpenBabel_DIR}/include/openbabel3)
    set(OpenBabel_LIBS ${OpenBabel_DIR}/lib/libopenbabel.so)
endif ()


set(CMAKE_DEBUG_POSTFIX d)

# add_subdirectory(app)
add_subdirectory(demo)
add_subdirectory(train)
