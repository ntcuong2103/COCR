cmake_minimum_required(VERSION 3.15)

project(lightnet)
set(OpenCV_DIR C:/Users/xgd/install/opencv/x64/vc16/lib)
find_package(OpenCV)


set(CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/cmake/Modules/" ${CMAKE_MODULE_PATH})

include(CheckLanguage)
check_language(CUDA)
enable_language(CUDA)

find_package(CUDA REQUIRED)
cuda_select_nvcc_arch_flags(CUDA_ARCH_FLAGS "Common")
message(STATUS "Building with CUDA flags: " "${CUDA_ARCH_FLAGS}")
set(CMAKE_CUDA_RUNTIME_LIBRARY "Shared")
find_package(CUDNN)

if(WIN32)
  set(PThreads_windows_DIR ${CMAKE_CURRENT_LIST_DIR}/backened/darknet/3rdparty/pthreads)
endif()

set(Stb_DIR ${CMAKE_CURRENT_LIST_DIR}/backened/darknet/3rdparty/stb)
find_package(Stb REQUIRED)
include_directories(${Stb_INCLUDE_DIR})


set(CMAKE_DEBUG_POSTFIX d)
set(CMAKE_THREAD_PREFER_PTHREAD ON)

find_package(Threads REQUIRED)
if(MSVC)
  find_package(PThreads_windows REQUIRED)
endif()

find_package(OpenMP)
if (OPENMP_FOUND)
    message("OPENMP FOUND")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
endif ()

include_directories(${CMAKE_CURRENT_LIST_DIR}/backened/darknet/include)

file(GLOB darknet_src "${CMAKE_CURRENT_LIST_DIR}/backened/darknet/src/*.c")
file(GLOB darknet_cuda_src "${CMAKE_CURRENT_LIST_DIR}/backened/darknet/src/*.cu")

list(APPEND darknet_src
  ${CMAKE_CURRENT_LIST_DIR}/backened/darknet/src/http_stream.cpp
  ${CMAKE_CURRENT_LIST_DIR}/backened/darknet/src/image_opencv.cpp)

if(NOT MSVC)
  list(REMOVE_ITEM darknet_src
    ${CMAKE_CURRENT_LIST_DIR}/backened/darknet/src/gettimeofday.c
    ${CMAKE_CURRENT_LIST_DIR}/backened/darknet/src/getopt.c)
endif()
message('' ${darknet_src})
message('' ${darknet_cuda_src})
add_executable(${PROJECT_NAME} ${darknet_src} ${darknet_cuda_src})

if(MSVC)
  target_link_libraries(${PROJECT_NAME} PRIVATE ws2_32 PThreads_windows::PThreads_windows)
  target_compile_definitions(${PROJECT_NAME} PRIVATE -D_CRT_RAND_S -DNOMINMAX -D_USE_MATH_DEFINES -D_TIMESPEC_DEFINED)
endif()

target_link_libraries(${PROJECT_NAME} PRIVATE ${OpenCV_LIBS} Threads::Threads curand cublas cuda CuDNN::CuDNN)
target_compile_definitions(${PROJECT_NAME} PRIVATE -DGPU -DCUDNN -DCUDNN_HALF -DOPENCV -DUSE_CMAKE_LIBS)
